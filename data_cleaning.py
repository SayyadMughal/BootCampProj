# -*- coding: utf-8 -*-
"""data_cleaning_SAM.ipy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hzoJZfDPZ0vXX94QWV-uvLLixIGL4suL
"""

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer  # for handling missing values
from sklearn.preprocessing import LabelEncoder, StandardScaler  # for encoding and scaling
from google.colab import drive
drive.mount('/content/drive')

# Dataset path (replace with the actual path if needed)
dataset_url = "/content/drive/MyDrive/FinalProject/PakEcomDataSet20k.csv"

# Output path (replace with the desired filename)
output_path = "/content/drive/MyDrive/FinalProject/cleaned_data.csv"


def load_and_clean_data(data_url, output_path):
  """
  Loads a dataset, handles missing values, encodes categorical variables,
  and normalizes or standardizes the data. Saves the cleaned data to a CSV file.

  Args:
      data_url (str): Path to the dataset file.
      output_path (str): Path to save the cleaned dataset as a CSV file.
  """

  # Load the dataset
  df = pd.read_csv(data_url)

  # Handle missing values
  # Identify numerical and categorical columns
  numerical_cols = df.select_dtypes(include=[np.number])
  categorical_cols = df.select_dtypes(include=['object']).columns

  # Impute missing values
  imputer_num = SimpleImputer(strategy="mean")  # Use mean for numerical data
  numerical_cols = df.select_dtypes(include=np.number).columns

  imputer_cat = SimpleImputer(strategy="most_frequent")  # Use most frequent for categorical data
  df[categorical_cols] = imputer_cat.fit_transform(df[categorical_cols])

  # Encode categorical variables (optional)
  # Replace with other encoding techniques (e.g., OneHotEncoder) if needed
  encoder = LabelEncoder()
  for col in categorical_cols:
      df[col] = encoder.fit_transform(df[col])

  # Normalize or standardize the data (optional)
  # Replace with StandardScaler or MinMaxScaler depending on your needs
  scaler = StandardScaler()
  df_scaled = pd.DataFrame(scaler.fit_transform(df))

  # Save the cleaned data
  df_scaled.to_csv(output_path, index=False)


if __name__ == "__main__":
  load_and_clean_data(dataset_url, output_path)
  print(f"Cleaned data saved to: {output_path}")