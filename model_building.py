# -*- coding: utf-8 -*-
"""model_building.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12xXYOOChHoffQqX2OLvlbFSGBDaVHpll
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression  # Example model - replace based on your problem

# Evaluation metrics (adjust based on your problem type)
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import drive
drive.mount('/content/drive')

# Dataset path (replace with the actual path if needed)
cleaned_data_path = "/content/drive/MyDrive/FinalProject/cleaned_data.csv"

# Splitting proportions
test_size = 0.2  # Adjust for desired test set size (e.g., 0.2 for 20% test data)


def build_and_evaluate_model(data_path, test_size):
  """
  Loads the cleaned data, splits it into training and testing sets, trains a machine
  learning model, and evaluates its performance on the testing data.

  Args:
      data_path (str): Path to the cleaned data CSV file.
      test_size (float): Proportion of data to use for the testing set.
  """

  # Load the cleaned data
  df = pd.read_csv(data_path)

  # Identify target column (replace with the actual name)
  target_column = "status"  # Replace with your actual target column

  # Split data into training and testing sets
  X = df.drop(target_column, axis=1)  # Features
  y = df[target_column]  # Target variable (continuous)
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

  # Choose and train a model (replace with a model suitable for regression)
  model = LinearRegression()
  model.fit(X_train, y_train)

  # Make predictions on the testing set
  y_pred = model.predict(X_test)

  # Evaluate model performance (use metrics appropriate for regression)
  mse = mean_squared_error(y_test, y_pred)
  r2 = r2_score(y_test, y_pred)

  # Print evaluation metrics
  print(f"Mean Squared Error: {mse:.4f}")
  print(f"R-squared: {r2:.4f}")


if __name__ == "__main__":
  build_and_evaluate_model(cleaned_data_path, test_size)